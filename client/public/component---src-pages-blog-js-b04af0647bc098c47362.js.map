{"version":3,"sources":["webpack:///./src/scss_modules/components/article.module.scss","webpack:///./src/scss_modules/components/blog.module.scss","webpack:///./src/articles/article_1.js","webpack:///./src/pages/blog.js"],"names":["module","exports","Article1","href","Blog","useState","showArticle","setShowArticle","useContext","Context","store","dispatch","addNewLike","id","a","fetch","method","headers","body","JSON","stringify","res","json","then","data","type","payload","catch","e","console","log","useEffect","articles","forEach","art","article_id","votes","document","querySelector","innerHTML","title","className","styles","nav","to","page","header","article","article__header","article__header_date","style","marginRight","article__title","article__buttons","article__buttons_read","onClick","scrollIntoView","behavior","article__buttons_like","article__wrapper","article__wrapper_content","article__tags"],"mappings":"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","file":"component---src-pages-blog-js-b04af0647bc098c47362.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"article-module--layout--2WITO\",\"util_color_blue\":\"article-module--util_color_blue--17ZRP\",\"util_color_purple\":\"article-module--util_color_purple--36Duk\",\"typing\":\"article-module--typing--2oUsV\",\"blinkCaret\":\"article-module--blink-caret--3LBiP\",\"slideDown\":\"article-module--slideDown--2P36A\",\"slideUp\":\"article-module--slideUp--EqVsE\",\"slideRight\":\"article-module--slideRight---f-vN\",\"slideLeft\":\"article-module--slideLeft--3E1nE\",\"showUp\":\"article-module--showUp--19kv1\",\"popUp\":\"article-module--popUp--3_WLG\",\"showLeft\":\"article-module--showLeft--36f3g\",\"slideButton\":\"article-module--slideButton--gqK27\",\"slideButtonReverse\":\"article-module--slideButtonReverse--XFw6b\",\"click\":\"article-module--click--1bp3C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"blog-module--layout--25JdM\",\"util_color_blue\":\"blog-module--util_color_blue--29bIS\",\"util_color_purple\":\"blog-module--util_color_purple--10mpu\",\"nav\":\"blog-module--nav--2hl6X\",\"page\":\"blog-module--page--XvHCb\",\"header\":\"blog-module--header--3UebM\",\"article\":\"blog-module--article--1_1nG\",\"article__header\":\"blog-module--article__header--yIY8a\",\"article__header_date\":\"blog-module--article__header_date--2_LFB\",\"article__title\":\"blog-module--article__title--2DYPv\",\"article__buttons\":\"blog-module--article__buttons--3CG1P\",\"article__buttons_read\":\"blog-module--article__buttons_read--fX70P\",\"article__buttons_like\":\"blog-module--article__buttons_like--3B03q\",\"click\":\"blog-module--click--37-8v\",\"article__wrapper\":\"blog-module--article__wrapper--Ksqrm\",\"article__tags\":\"blog-module--article__tags--1FUYu\",\"typing\":\"blog-module--typing--2AOxS\",\"blinkCaret\":\"blog-module--blink-caret--2GPko\",\"slideDown\":\"blog-module--slideDown--2oOq6\",\"slideUp\":\"blog-module--slideUp--10ARU\",\"slideRight\":\"blog-module--slideRight--T2Q2z\",\"slideLeft\":\"blog-module--slideLeft--v7fXF\",\"showUp\":\"blog-module--showUp--_g5VK\",\"popUp\":\"blog-module--popUp--2Nul7\",\"showLeft\":\"blog-module--showLeft--1Ea6c\",\"slideButton\":\"blog-module--slideButton--1fav2\",\"slideButtonReverse\":\"blog-module--slideButtonReverse--3MURs\"};","import React from \"react\"\r\nimport styles from \"../scss_modules/components/article.module.scss\"\r\n\r\nconst Article1 = () => {\r\n  return (\r\n    <main>\r\n      <section>\r\n        <h1>\r\n          In this article I will discuss how to connect via SSH from your client\r\n          Windows 10 machine to private Virtual Server running Linux OS.\r\n        </h1>\r\n        <article>\r\n          <p>\r\n            How properly setup your VS Code on Windows to be able to connect to\r\n            your Linux Virtual Server? Things are not so straight forward like\r\n            on MacOS or other Linux clients. This is because some older versions\r\n            of Windows 10 haven’t got OpenSSH client installed by default. There\r\n            are many tutorials on the web, which instruct you how to SSH to your\r\n            Linux Virtual Server using Putty, but not many how to do it via\r\n            OpenSSH client (which Putty <strong>is not</strong> compatibile\r\n            with) and later how to configure it on Visual Studio to be able to\r\n            use it from VS Code terminal.\r\n          </p>\r\n          <p>\r\n            This tutorial is based and tested on Windows 10 client and Ubuntu\r\n            18.04 server (however it should work on other Linux distributions as\r\n            well).\r\n          </p>\r\n          <p>\r\n            I will assume that you have installed VS Code – if not you can do it\r\n            right away by:\r\n          </p>\r\n          <ul>\r\n            <li>\r\n              go to{\" \"}\r\n              <a href=\"https://code.visualstudio.com/\">\r\n                https://code.visualstudio.com/\r\n              </a>\r\n            </li>\r\n            <li>choose your operating System (Windows)</li>\r\n            <li>download and install.</li>\r\n          </ul>\r\n\r\n          <p>\r\n            The neccessary tool we will need on Windows 10 to ssh to linux via\r\n            VS Code is <strong>OpenSSH client</strong>.\r\n          </p>\r\n        </article>\r\n      </section>\r\n\r\n      <section>\r\n        <h3>\r\n          I. Installing, configuring and testing OpenSSH client on Windows\r\n        </h3>\r\n\r\n        <article>\r\n          <p>\r\n            1. To check if you got it installed and active we will log in to\r\n            PowerShell as administrator:\r\n          </p>\r\n          <p>\r\n            press command Window button or click on Search Field left down on\r\n            the screen and type ‘PowerShell’ . On left side navigate with arrows\r\n            to Windows PowerShell and from right side choose ‘Run as\r\n            administrator’ option. After that you will be promped warning, click\r\n            Yes and the terminal window will appear.\r\n          </p>\r\n        </article>\r\n\r\n        <article>\r\n          <p>2. Check if OpenSSH client is installed, type:</p>\r\n\r\n          <ul>\r\n            <li>Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'</li>\r\n            <li>\r\n              # If installed - this should return something like this:\r\n              <br />\r\n              Name : OpenSSH.Client~~~~0.0.1.0\r\n              <br />\r\n              State : Installed\r\n              <br />\r\n              Name : OpenSSH.Server~~~~0.0.1.0\r\n              <br />\r\n              State : Installed\r\n              <br />\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            If State: Installed – you're fine, OpenSSH is installed already and\r\n            you can skip step 3.\r\n            <br />\r\n            <strong>\r\n              Otherwise State: Not Present – you have to install it manually.\r\n            </strong>\r\n          </p>\r\n        </article>\r\n\r\n        <article>\r\n          <p>3. Install OpenSSH by typing:</p>\r\n          <ul>\r\n            <li>\r\n              Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\r\n            </li>\r\n          </ul>\r\n          <p> It should return output like:</p>\r\n          <ul>\r\n            <li>\r\n              Path : <br />\r\n              Online : True <br />\r\n              RestartNeeded : False\r\n              <br />\r\n            </li>\r\n          </ul>\r\n        </article>\r\n\r\n        <article>\r\n          <p>\r\n            4. Enable OpenSSH service and firewall configuration. In terminal\r\n            type:\r\n          </p>\r\n          <ul>\r\n            <li>Start-Service sshd </li>\r\n            <li>\r\n              # OPTIONAL but recommended: <br />\r\n              Set-Service -Name sshd -StartupType 'Automatic' <br />\r\n              # Confirm the Firewall rule is configured. It should be created\r\n              automatically by setup. <br />\r\n              Get-NetFirewallRule -Name *ssh* <br />\r\n              # There should be a firewall rule named \"OpenSSH-Server-In-TCP\",\r\n              which should be enabled <br />\r\n              # If the firewall does not exist, create one <br />\r\n              New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server\r\n              (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action\r\n              Allow -LocalPort 22 <br />\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            !Be aware Step 5 assumes that you configured your server with\r\n            password authentication (5.a) or privateKey authentication (5.b). If\r\n            you’re not sure what is that – please check my other article about{\" \"}\r\n            <a href=\"/blog#article_2\">Ubuntu Configuration with SSH</a>.\r\n          </p>\r\n        </article>\r\n\r\n        <article>\r\n          <p>\r\n            5.a) Check configuration by trying to access your server secured\r\n            with password authentication. In the PowerShell terminal type:\r\n          </p>\r\n          <ul>\r\n            <li>ssh USER@HOST_NAME</li>\r\n\r\n            <li>\r\n              # Where USER is your username and HOST_NAME your machine IP\r\n              address or host name, for example: # ssh root@132.234.567.890 or\r\n              ssh root@example.com or ssh admin@132.xxx.xxx.xxx etc …\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            Then type your password and here you are. You should be logged in.\r\n            Be aware that this authentication will succed if and only if you\r\n            enabled password authentication! For security reasons it is always\r\n            better to ssh to your server with use of PublicKey authentication.\r\n            Some of Virtual Hosts Providers such as Digital Ocean or AWS\r\n            Services will allow you to add SSH key on your server at the moment\r\n            of creating Droplet (Digital Ocean) or lunching EC2 Instance (AWS\r\n            Services). If you don’t have generated and enabled SSH Key on your\r\n            server I recommend to do so! Check my\r\n            <a href=\"/blog#article_2\">Ubuntu Configuration with SSH</a> article\r\n            for more info.\r\n          </p>\r\n        </article>\r\n\r\n        <article>\r\n          <p>\r\n            5.b) Check configuration by trying to access your server secured\r\n            with PrivateKey authentication:\r\n          </p>\r\n          <ul>\r\n            <li>ssh -i PATH/TO/YOUR/PRIVATE_KEY USER@HOST_NAME</li>\r\n\r\n            <li>\r\n              #where PATH/TO/YOUR/PRIVATE_KEY is path where you store private\r\n              key, usually something like: C:\\Users\\admin\\.ssh\\id_rsa #where\r\n              admin should be replaced with your Windows User name\r\n              <br />\r\n              # USER is your username on Linux server\r\n              <br />\r\n              #HOST_NAME - your machine IP address or host name\r\n              <br />\r\n              # So for example whole command should look like: ssh -i\r\n              C:\\Users\\John\\.ssh\\id_rsa root@example.com or ssh -i\r\n              C:\\Users\\John\\.ssh\\id_rsa root@117.18.558.221\r\n              <br />\r\n            </li>\r\n          </ul>\r\n          <p>If you log in for first time you will be promped with:</p>\r\n          <ul>\r\n            <li>\r\n              The authenticity of host 'servername (132.xxx.xxx.xxx)' can't be\r\n              established. ECDSA key fingerprint is SHA256:(\r\n              {\"<a large string>\"}). Are you sure you want to continue\r\n              connecting (yes/no)?\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            Type: Yes\r\n            <br />\r\n            If your key is not secured with phrasse it should already connect\r\n            you to your Linux VS Server.\r\n            <br />\r\n            If you secured your key with phrasse you will be asked to enter it.\r\n            <br />\r\n            That way you should be logged in. <br />\r\n            But wait. Is this article not about ssh via VS Code not PowerShell?{\" \"}\r\n            <br />\r\n            Yes it is! That’s just half of the job. Now you have to configure VS\r\n            Code to connect to server just like you would do it through\r\n            PowerShell.\r\n            <br />\r\n          </p>\r\n        </article>\r\n      </section>\r\n      <section>\r\n        <h3>\r\n          II. Installing, configuring and testing Remote-SSH on Visual Studio\r\n          Code\r\n        </h3>\r\n        <article>\r\n          <p>\r\n            Now when you are able to SSH to your server via PowerShell OpenSSH\r\n            client, it is possible to configure VS Code to do it simillar way.\r\n            You will need to install VS Code extension called Remote\r\n            Development.\r\n          </p>\r\n          <ul>\r\n            <li>\r\n              Open VS Code and press Ctrl+Shift+X to open search field for\r\n              extensions.{\" \"}\r\n            </li>\r\n            <li>Type Remote Development to look for it – click install.</li>\r\n          </ul>\r\n          <p>\r\n            This extension contains actually three extensions, which Remote-SSH\r\n            is the most important for us. After installing you should see in\r\n            left bottom corner small green icon <sub>{\">\"}</sub>\r\n            <sup>{\"<\"}</sup>.\r\n          </p>\r\n        </article>\r\n        <article>\r\n          <p>\r\n            First you need to add your server credentials to configuration file\r\n            of Remote-SSH. You will do that by clicking on green icon and\r\n            choosing option\r\n          </p>\r\n          <ul>\r\n            <li>\r\n              Remote-SSH: Open Configuration File…/ #(eventually press F1 and\r\n              search for Remote-SSH: Open Configuration File..).{\" \"}\r\n            </li>\r\n          </ul>\r\n          <p>\r\n            Choose the top file, the one with a path like{\" \"}\r\n            <strong>C:\\Users\\USER\\.ssh\\config </strong>. <br />\r\n            In that file add following lines:\r\n          </p>\r\n          <ul>\r\n            <li>Host [easy to remember alias of your host machine]</li>\r\n            <li>HostName [name of host or ip address]</li>\r\n            <li>User [user you want to login as]</li>\r\n            <li>\r\n              IdentityFile [path to the ssh key] # skip this if you ssh with\r\n              password only\r\n            </li>\r\n          </ul>\r\n          <p>For Example:</p>\r\n          <ul>\r\n            <li>Host myServer</li>\r\n            <li>HostName 176.111.234.551</li>\r\n            <li>User root</li>\r\n            <li>\r\n              IdentityFile C:\\Users\\peter\\.ssh\\id_rsa # skip this if you ssh\r\n              with password only\r\n            </li>\r\n          </ul>\r\n        </article>\r\n        <article>\r\n          <p>\r\n            Save changes in config file. Now click green icon (or press F1) and\r\n            choose option Remote-SSH: Connect To Host… - you should be able to\r\n            choose added host and connect to your server (if you use key\r\n            authentication you will be promped to enter it). That’s it! You can\r\n            enjoy professional editor + terminal to manage content of your\r\n            Virtual Server.\r\n          </p>\r\n        </article>\r\n      </section>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Article1\r\n","import React, { useState, useContext, useEffect } from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { Context } from \"../store\"\r\nimport SEO from \"../components/seo\"\r\nimport Layout from \"../layouts/layout_default\"\r\nimport { FaHeart, FaClock } from \"react-icons/fa\"\r\nimport styles from \"../scss_modules/components/blog.module.scss\"\r\nimport Article1 from \"../articles/article_1.js\"\r\n\r\nfunction Blog() {\r\n  const [showArticle, setShowArticle] = useState(0)\r\n  const { store, dispatch } = useContext(Context)\r\n\r\n  const appendArticle = (num, id) => {\r\n    setShowArticle(num)\r\n    const wrapper = document.querySelector(`#${id}`)\r\n    return wrapper.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n  const getArticlesVotes = () => {\r\n    console.log(store.articles)\r\n    store.articles.forEach(art => {\r\n      const id = art.article_id\r\n      const votes = art.votes\r\n      const votesElement = document.querySelector(`#likes-${id}`)\r\n      return (votesElement.innerHTML = votes)\r\n    })\r\n  }\r\n  const uploadArticles = () => {\r\n    fetch(\"/api/getArticles\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        dispatch({\r\n          type: \"getArticles\",\r\n          payload: data,\r\n        })\r\n      })\r\n      .catch(e => console.log(e))\r\n  }\r\n  //add like\r\n  const addNewLike = async id => {\r\n    try {\r\n      const res = await fetch(\"/api/uploadVote\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id }),\r\n      })\r\n      const data = await res.json()\r\n      if (data == \"Updated\") {\r\n        uploadArticles()\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getArticlesVotes()\r\n  }, [store.articles])\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Services\" />\r\n      <nav className={styles.nav}>\r\n        <p>\r\n          <Link to=\"/\">Home</Link> > <Link to=\"/blog\">Blog</Link>\r\n        </p>\r\n      </nav>\r\n      <main className={styles.page}>\r\n        <ul className={styles.header}>\r\n          <li>\r\n            Sort by:\r\n            <span>date</span>\r\n            <span>votes</span>\r\n          </li>\r\n          <li>\r\n            Popular:\r\n            <span>JavaScript</span>\r\n            <span>Nginx</span>\r\n          </li>\r\n        </ul>\r\n\r\n        <div className={styles.article}>\r\n          <div className={styles.article__header}>\r\n            <div className={styles.article__header_date}>\r\n              <FaClock style={{ marginRight: \"1rem\" }} />\r\n              Date of submiting:\r\n              <span>06-05-2020</span>\r\n            </div>\r\n          </div>\r\n          <div className={styles.article__title}>\r\n            <h6>\r\n              Connect to Linux Virtual Server via Visual Studio Code on Windows\r\n              10 using Secure Shell protocol (SSH) without PuTTY.\r\n            </h6>\r\n          </div>\r\n\r\n          <div className={styles.article__buttons}>\r\n            <div className={styles.article__buttons_read}>\r\n              {showArticle === 1 ? (\r\n                <button onClick={() => setShowArticle(0)}>Close</button>\r\n              ) : (\r\n                <button onClick={() => appendArticle(1, \"article_1\")}>\r\n                  Read article\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <div className={styles.article__buttons_like}>\r\n              <FaHeart onClick={() => addNewLike(\"article_1\")} />\r\n              <span id=\"likes-article_1\"></span>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.article__wrapper}>\r\n            <div className={styles.article__wrapper_content} id=\"article_1\">\r\n              {showArticle === 1 ? <Article1 /> : null}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.article__tags}>\r\n            <p>Tags:</p>\r\n            <ul>\r\n              <li>#VS Code</li>\r\n              <li>#Windows</li>\r\n              <li>#Linux</li>\r\n              <li>#SSH</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Blog\r\n"],"sourceRoot":""}